@code {
	[CascadingParameter] public HttpContext HttpContext { get; set; } = default!;

	[SupplyParameterFromForm(Name = "PasswordForm")]
    public Form? PasswordForm { get; set; }
    private string customMessage = "";

    [Inject] DatabaseContext Db { get; set; } = default!;
    [Inject] NavigationManager NavManager { get; set; } = default!;
    [Inject] UsersService UsersService { get; set; } = default!;
    [Inject] AuthService AuthService { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        PasswordForm ??= new();
    }

    private async Task OnSubmit()
    {
	    var currentUser = await AuthService.GetAuthenticatedUser(HttpContext.User);

	    if (currentUser != null)
	    {
		    var existingUser = await UsersService.FindUserByCredsAsync(currentUser.Email, UsersService.GetSha256Hash(PasswordForm.CurrentPassword));
		    if (existingUser == null)
		    {
			    customMessage = "Current password was incorrect.";
			    return;
		    }

		    existingUser.Password = UsersService.GetSha256Hash(PasswordForm.NewPassword);
		    Db.Users.Save(existingUser);
		    HttpContext.SetFlash("success", "Password updated.");
			NavManager.NavigateTo("/profile/edit");
	    }
    }

    public class Form
    {
        [Required(ErrorMessage = "Current Password is required")]
        public string CurrentPassword { get; set; } = default!;

        [Required(ErrorMessage = "New Password is required")]
        public string NewPassword { get; set; } = default!;

        [Required(ErrorMessage = "Confirm password is required")]
        [Compare("NewPassword", ErrorMessage = "The New Password and Confirm Password do not match.")]
        public string ConfirmPassword { get; set; } = default!;
    }
}

<EditForm Model="PasswordForm" OnValidSubmit="OnSubmit" FormName="PasswordForm" method="post" Enhance class="max-w-2xl grid grid-cols-1 gap-y-6">
    <DataAnnotationsValidator />
	<label class="form-control w-full">
		<div class="label">
			<span class="label-text font-medium">Current Password</span>
		</div>
		<InputText @bind-Value="PasswordForm.CurrentPassword" type="password" class="input input-bordered w-full" />
		<ValidationMessage For="() => PasswordForm.CurrentPassword" />
        @if (!String.IsNullOrEmpty(customMessage))
        {
            <div class="mt-1 text-red-500 text-sm">
                @customMessage
            </div>
        }
    </label>
	<label class="form-control w-full">
		<div class="label">
			<span class="label-text font-medium">New Password</span>
		</div>
		<InputText @bind-Value="PasswordForm.NewPassword" type="password" class="input input-bordered w-full" />
		<ValidationMessage For="() => PasswordForm.NewPassword" />
    </label>
	<label class="form-control w-full">
		<div class="label">
			<span class="label-text font-medium">Confirm Password</span>
		</div>
		<InputText @bind-Value="PasswordForm.ConfirmPassword" type="password" class="input input-bordered w-full" />
		<ValidationMessage For="() => PasswordForm.ConfirmPassword" />
    </label>
    <div class="flex justify-end">
	    <button type="submit" class="btn btn-neutral">
		    <span class="loading loading-spinner loading-xs htmx-indicator"></span>
		    Save
	    </button>
    </div>
</EditForm>
